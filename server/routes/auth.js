const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const db = require('../config/db');
const JWT_SECRET = 'your_secret_key';

// üü¢ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
router.post('/register', async (req, res) => {
    const { username, email, password, role } = req.body;

    if (!username || !email || !password || !role) {
        return res.status(400).json({ message: '–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è' });
    }

    if (!['admin', 'teacher', 'student'].includes(role)) {
        return res.status(400).json({ message: '–ù–µ–¥—ñ–π—Å–Ω–∞ —Ä–æ–ª—å' });
    }

    try {
        const hash = await bcrypt.hash(password, 10);

        const [result] = await db.execute(
            'INSERT INTO Users (username, email, password_hash, role) VALUES (?, ?, ?, ?)',
            [username, email, hash, role]
        );

        const token = jwt.sign({ user_id: result.insertId, username, role }, JWT_SECRET);
        res
            .cookie('token', token, { httpOnly: true, sameSite: 'Lax' })
            .json({ username, role });
    } catch (err) {
        res.status(400).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î', error: err.message });
    }
});

// üü¢ –í—Ö—ñ–¥
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password)
        return res.status(400).json({ message: '–í–≤–µ–¥—ñ—Ç—å email —ñ –ø–∞—Ä–æ–ª—å' });

    try {
        const [users] = await db.execute('SELECT * FROM Users WHERE email = ?', [email]);
        const user = users[0];

        if (!user)
            return res.status(401).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

        const isMatch = await bcrypt.compare(password, user.password_hash);
        if (!isMatch)
            return res.status(401).json({ message: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å' });

        const token = jwt.sign(
            { user_id: user.user_id, username: user.username, role: user.role },
            JWT_SECRET
        );

        await db.execute('UPDATE Users SET last_login = NOW() WHERE user_id = ?', [user.user_id]);

        res
            .cookie('token', token, { httpOnly: true, sameSite: 'Lax' })
            .json({ username: user.username, role: user.role });
    } catch (err) {
        res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞', error: err.message });
    }
});

// üî¥ –í–∏—Ö—ñ–¥
router.post('/logout', (req, res) => {
    res.clearCookie('token').json({ message: '–í–∏—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π' });
});

// üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.get('/me', (req, res) => {
    const token = req.cookies.token;
    if (!token) return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ' });

    try {
        const user = jwt.verify(token, JWT_SECRET);
        res.json(user);
    } catch (err) {
        res.status(403).json({ message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω' });
    }
});

router.post('/logout', (req, res) => {
    req.session.destroy(() => {
        res.clearCookie('testpad_sid');
        res.json({ message: '–í–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏' });
    });
});


module.exports = router;
